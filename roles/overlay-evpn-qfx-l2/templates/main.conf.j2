/* This block of configuration has been generated by the role overlay-evpn-qfx-l2 for Ansible */

protocols {
    bgp {
        group overlay-evpn {
            type internal;
            family evpn {
                signaling;
            }
            local-address {{ loopback_ip }};
            local-as {{ overlay.local.asn }};
            multipath;
{% for neighbor in overlay.neighbors %}
            neighbor {{ neighbor }};
{% endfor %}
{% if overlay.remote_gw is defined %}
            import OVERLAY-IN;
{% endif %}
            bfd-liveness-detection {
                minimum-interval {{ overlay.bfd.min_interval }};
                multiplier {{ overlay.bfd.multiplier }};
                session-mode {{ overlay.bfd.mode }};
            }
        }
    }
    evpn {
        encapsulation vxlan;
        extended-vni-list [ {% for name, tenant in overlay.tenants.items() %}{% for bd in tenant.bridge_domains %} {{ bd.vni_id }} {% endfor %}{% endfor %} ];
        multicast-mode ingress-replication;
        vni-options {
{% for name, tenant in overlay.tenants.items() %}
{% for bd in tenant.bridge_domains %}
            vni {{ bd.vni_id }} {
                vrf-target export target:1:{{ bd.vni_id }};
            }
{% endfor %}
{% endfor %}
        }
    }
}

switch-options {
    vtep-source-interface lo0.0;
    vrf-import LEAF-IN;
    vrf-target target:9999:9999;
    route-distinguisher {{ loopback_ip }}:1;
}

policy-options {
     policy-statement LEAF-IN {
        term import_leaf_esi {
            from community comm-leaf_esi;
            then accept;
          }
{% for name, tenant in overlay.tenants.items() %}
{% for bd in tenant.bridge_domains %}
        term import_vni{{ bd.vni_id }} {
            from community com{{ bd.vni_id }};
            then accept;
        }
{% endfor %}
{% endfor %}
        term default {
            then reject;
        }
    }
{# Policy to reject Anycast GW from other pods #}
{% if overlay.remote_gw is defined %}
    policy-statement OVERLAY-IN {
      term reject-remote-gw {
          from {
              family evpn;
              next-hop [ {% for gw in overlay.remote_gw %}{{ gw }} {% endfor %} ];
              nlri-route-type [ 1 2 ];
          }
          then reject;
      }
      term accept-all {
          then accept;
      }
    }
{% endif %}

{% for name, tenant in overlay.tenants.items() %}
{% for bd in tenant.bridge_domains %}
    community com{{ bd.vni_id }} members target:1:{{ bd.vni_id }};
{% endfor %}
{% endfor %}
    community comm-leaf_esi members target:9999:9999;
}


vlans {
{% for name, tenant in overlay.tenants.items() %}
{% for bd in tenant.bridge_domains %}
    bd{{ bd.vni_id }} {
{% if not overlay.vlan_normalized %}
        vlan-id {{ bd.vlan_id }};
{% endif %}
        vxlan {
            vni {{ bd.vni_id }};
        }
    }
{% endfor %}
{% endfor %}
}
